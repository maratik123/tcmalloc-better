[package]
name = "tcmalloc-better"
version = "0.1.18"
edition = "2024"
rust-version = "1.87.0"
description = "A Rust wrapper over Google's TCMalloc memory allocator"
repository = "https://github.com/maratik123/tcmalloc-better"
license = "MIT"
keywords = [
    "tcmalloc",
    "allocator",
    "memory",
    "performance"
]
categories = [
    "memory-management",
    "api-bindings"
]
readme = "README.md"
authors = [
    "Marat Bukharov <marat.buharov@gmail.com>"
]
exclude = [
    "/.idea",
    "/.github",
]

[workspace]
members = [
    "libtcmalloc-sys/bazel-log-parser",
    "libtcmalloc-sys"
]

[dependencies]
libtcmalloc-sys = { path = "libtcmalloc-sys", version = "0.1.13", default-features = false }
document-features = "0.2"

[features]
default = ["std", "8k_pages", "extension"]
## enable std
std = []
## TCMalloc extension API
extension = ["libtcmalloc-sys/extension"]
## Enable NUMA-aware allocation. Need to use `TCMALLOC_NUMA_AWARE` environment variable at runtime.
## See [TCMalloc comments](https://github.com/google/tcmalloc/blob/master/tcmalloc/internal/numa.cc#L54)
numa_aware = ["libtcmalloc-sys/numa_aware"]
## Use deprecated per-thread caching. Newer systems with Linux kernel version >= 4.18 should not use this.
deprecated_perthread = ["libtcmalloc-sys/deprecated_perthread"]
## Use legacy locking backend (which is not TLB-aware)
## See [TCMalloc docs](https://github.com/google/tcmalloc/blob/master/docs/design.md#tcmalloc-backend)
legacy_locking = ["libtcmalloc-sys/legacy_locking"]
## Use TCMalloc's realloc instead of default [`GlobalAlloc::realloc`].
## Caveats: All memory deallocations will use the slower unsized `TCMallocInternalDeleteAligned`
## (which accesses slow page map).
## Enable this feature only if you frequently use realloc operations which resides in same size class or same
## `kPageSize`-sized blocks, and only after performance measurements or benchmarking.
## Rust standard library uses realloc of such conditions mainly for manually shrinking operations. Reallocation for
## growing operation increments size twice, so it will not be the same size class anyway in such case.
realloc = []

#! ### Logical Page Sizes (These features are mutually exclusive).
#! Larger page size leads to greater performance in expense to increased fragmentation.
#! See [TCMalloc tuning guide](https://github.com/google/tcmalloc/blob/master/docs/tuning.md#the-logical-page-size-for-tcmalloc):

## 8k pages
8k_pages = ["libtcmalloc-sys/8k_pages"]
## Large pages
32k_pages = ["libtcmalloc-sys/32k_pages"]
## 256k pages
256k_pages = ["libtcmalloc-sys/256k_pages"]
## 4k pages, option for memory constrained systems
small_but_slow = ["libtcmalloc-sys/small_but_slow"]

#! ### Madvise Transparent Hugepages control (Use no more than one value)
#! By default, if none of these features are enabled, madvise hugepages will be enabled:

## Disable madvise hugepages
disable_madv_hugepage_always = ["libtcmalloc-sys/disable_madv_hugepage_always"]
## Disable madvise hugepages via environment variable `TCMALLOC_DISABLE_MADV_HUGEPAGE` at runtime.
## This variable can be set to `0` or `1` to enable or disable madvise hugepages respectively.
disable_madv_hugepage_by_var = ["libtcmalloc-sys/disable_madv_hugepage_by_var"]

[package.metadata.docs.rs]
features = ["std", "extension", "8k_pages"]
# enable features in the documentation
rustdoc-args = ["--cfg", "docsrs"]
rustc-args = ["--cfg", "docsrs"]
